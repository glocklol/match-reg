name: Register for Practice with Purpose NOW

on:
  workflow_dispatch:
    inputs:
      match_date:
        description: 'Match date (e.g., 07-24-25)'
        required: true
        default: '07-24-25'
      power_factor:
        description: 'Power factor'
        required: true
        default: 'minor'
        type: choice
        options:
          - minor
          - major

jobs:
  register-pwp:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install playwright
        playwright install chromium

    - name: Create registration script
      run: |
        cat > register_pwp_now.py << 'EOF'
        #!/usr/bin/env python3
        """
        Emergency PWP Registration Script for GitHub Actions
        """
        
        import os
        import asyncio
        from playwright.async_api import async_playwright
        
        async def register_pwp():
            """Register for Practice with Purpose immediately"""
            print("üéØ EMERGENCY PWP REGISTRATION STARTING...")
            print("=" * 60)
            
            # Get environment variables
            username = os.environ['PRACTISCORE_USERNAME']
            password = os.environ['PRACTISCORE_PASSWORD']
            match_date = os.environ.get('MATCH_DATE', '07-24-25')
            power_factor = os.environ.get('POWER_FACTOR', 'minor')
            
            print(f"Target match date: {match_date}")
            print(f"Power factor: {power_factor}")
            
            async with async_playwright() as p:
                try:
                    # Launch browser
                    browser = await p.chromium.launch(
                        headless=True,
                        args=[
                            '--no-sandbox',
                            '--disable-dev-shm-usage',
                            '--disable-blink-features=AutomationControlled',
                            '--disable-web-security',
                            '--disable-features=VizDisplayCompositor'
                        ]
                    )
                    
                    context = await browser.new_context(
                        user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                        viewport={'width': 1920, 'height': 1080}
                    )
                    
                    page = await context.new_page()
                    
                    # Step 1: Login
                    print("\nüîê Step 1: Logging into PractiScore...")
                    await page.goto('https://practiscore.com/login', wait_until='networkidle')
                    
                    # Fill login form
                    await page.fill('input[name="email"]', username)
                    await page.fill('input[name="password"]', password)
                    
                    # Submit login
                    await page.click('button[type="submit"]')
                    await page.wait_for_load_state('networkidle')
                    
                    current_url = page.url
                    print(f"After login URL: {current_url}")
                    
                    if 'dashboard' not in current_url:
                        print("‚ùå Login may have failed")
                        return False
                    
                    print("‚úÖ Login successful!")
                    
                    # Step 2: Navigate to PWP match
                    print(f"\nüéØ Step 2: Looking for PWP match ({match_date})...")
                    
                    # Try direct URL first
                    match_slug = f"nsps-practice-with-purpose-{match_date}"
                    direct_url = f"https://practiscore.com/{match_slug}"
                    
                    await page.goto(direct_url, wait_until='networkidle')
                    
                    # Check if match exists
                    if page.url == direct_url:
                        print(f"‚úÖ Found match at: {direct_url}")
                        
                        # Check if already registered
                        page_content = await page.content()
                        if 'already registered' in page_content.lower():
                            print("‚úÖ ALREADY REGISTERED for this match!")
                            return True
                        
                        # Look for register button/link
                        register_elements = await page.locator('a:has-text("Register"), button:has-text("Register")').all()
                        
                        if register_elements:
                            print(f"üü¢ Found {len(register_elements)} register elements")
                            
                            # Click first register element
                            await register_elements[0].click()
                            await page.wait_for_load_state('networkidle')
                            
                            # Step 3: Fill registration form
                            print("\nüìù Step 3: Filling registration form...")
                            
                            # Fill power factor
                            power_selectors = [
                                'select[name*="power"]',
                                'select[name*="factor"]',
                                'select[id*="power"]'
                            ]
                            
                            power_filled = False
                            for selector in power_selectors:
                                try:
                                    if await page.locator(selector).count() > 0:
                                        await page.select_option(selector, power_factor.title())
                                        print(f"‚úÖ Selected power factor: {power_factor}")
                                        power_filled = True
                                        break
                                except:
                                    continue
                            
                            if not power_filled:
                                # Try radio buttons
                                radio_selector = f'input[type="radio"][value="{power_factor}" i]'
                                if await page.locator(radio_selector).count() > 0:
                                    await page.click(radio_selector)
                                    print(f"‚úÖ Selected power factor radio: {power_factor}")
                                else:
                                    print("‚ö†Ô∏è Could not find power factor field")
                            
                            # Submit registration
                            submit_selectors = [
                                'button[type="submit"]',
                                'input[type="submit"]',
                                'button:has-text("Submit")',
                                'button:has-text("Register")'
                            ]
                            
                            for selector in submit_selectors:
                                if await page.locator(selector).count() > 0:
                                    print("üöÄ Submitting registration...")
                                    await page.click(selector)
                                    await page.wait_for_load_state('networkidle')
                                    break
                            
                            # Check for success
                            final_content = await page.content()
                            final_url = page.url
                            
                            print(f"Final URL: {final_url}")
                            
                            if any(word in final_content.lower() for word in ['registered', 'confirmation', 'success', 'thank you']):
                                print("üéâ REGISTRATION SUCCESSFUL!")
                                return True
                            else:
                                print("‚ùì Registration status unclear")
                                print("Final page content preview:")
                                print(final_content[:500])
                                return False
                        
                        else:
                            print("‚ùå No register button found - registration may not be open")
                            return False
                    
                    else:
                        print("‚ùå Match URL not found or redirected")
                        
                        # Try searching dashboard
                        await page.goto('https://practiscore.com/dashboard/home', wait_until='networkidle')
                        
                        pwp_links = await page.locator('a:has-text("Practice with Purpose")').all()
                        print(f"Found {len(pwp_links)} PWP matches on dashboard")
                        
                        for link in pwp_links:
                            link_text = await link.text_content()
                            if match_date.replace('-', '/') in link_text or match_date.replace('-', '-') in link_text:
                                print(f"‚úÖ Found target match: {link_text}")
                                await link.click()
                                await page.wait_for_load_state('networkidle')
                                # Continue with registration logic...
                                break
                        else:
                            print("‚ùå Could not find target PWP match")
                            return False
                    
                finally:
                    await browser.close()
                    
        if __name__ == "__main__":
            success = asyncio.run(register_pwp())
            if success:
                print("\n‚úÖ PWP Registration completed successfully!")
                exit(0)
            else:
                print("\n‚ùå PWP Registration failed!")
                exit(1)
        EOF

    - name: Run PWP Registration
      env:
        PRACTISCORE_USERNAME: ${{ secrets.PRACTISCORE_USERNAME }}
        PRACTISCORE_PASSWORD: ${{ secrets.PRACTISCORE_PASSWORD }}
        MATCH_DATE: ${{ inputs.match_date }}
        POWER_FACTOR: ${{ inputs.power_factor }}
      run: |
        python register_pwp_now.py

    - name: Verify Registration Status
      if: success()
      env:
        PRACTISCORE_USERNAME: ${{ secrets.PRACTISCORE_USERNAME }}
        PRACTISCORE_PASSWORD: ${{ secrets.PRACTISCORE_PASSWORD }}
      run: |
        cat > verify_registration.py << 'EOF'
        #!/usr/bin/env python3
        import os
        import asyncio
        from playwright.async_api import async_playwright
        
        async def verify():
            print("üîç Verifying registration status...")
            
            async with async_playwright() as p:
                browser = await p.chromium.launch(headless=True)
                context = await browser.new_context()
                page = await context.new_page()
                
                # Login
                await page.goto('https://practiscore.com/login')
                await page.fill('input[name="email"]', os.environ['PRACTISCORE_USERNAME'])
                await page.fill('input[name="password"]', os.environ['PRACTISCORE_PASSWORD'])
                await page.click('button[type="submit"]')
                await page.wait_for_load_state('networkidle')
                
                # Check dashboard
                await page.goto('https://practiscore.com/dashboard/home')
                content = await page.content()
                
                if 'practice with purpose' in content.lower():
                    print("‚úÖ Practice with Purpose matches found on dashboard")
                    
                    # Look for registration confirmation
                    pwp_links = await page.locator('a:has-text("Practice with Purpose")').all()
                    for link in pwp_links:
                        link_text = await link.text_content()
                        print(f"Found: {link_text}")
                else:
                    print("‚ö†Ô∏è No Practice with Purpose matches visible")
                
                await browser.close()
        
        asyncio.run(verify())
        EOF
        
        python verify_registration.py

    - name: Send Notification
      if: always()
      run: |
        if [ "$?" -eq 0 ]; then
          echo "üéâ PWP Registration workflow completed successfully!"
          echo "Check your PractiScore dashboard: https://practiscore.com/dashboard/home"
        else
          echo "‚ùå PWP Registration workflow failed"
          echo "Check the logs above for details"
        fi